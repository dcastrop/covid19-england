{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["postcodes","require","CANDIDATE_KEYS","App","props","state","ready","failed","cases","Map","postcodeInput","this","fetch","resp","ok","json","area","last_update","cases_map","set","setState","lastUpdate","fetchDataSource","then","console","log","lookup","postcode","lookupResult","result","found","k","v","has","numCases","get","myArea","myCaseNo","undefined","findData","onSubmit","handleReset","bind","type","value","render_main","event","target","href","handleSubmit","onChange","handlePostcode","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"0TAGMA,G,MAAYC,EAAQ,KAcpBC,EAAiB,CAAC,qBAAsB,kBAoH/BC,E,YA9Gb,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KACDC,MAAQ,CACXC,OAAO,EACPC,QAAQ,EACRC,MAAO,IAAIC,IACXC,cAAe,IANI,E,6MAWjBC,KAAKN,MAAMC,M,iEACIM,MAjBH,oB,YAiBVC,E,QACGC,G,iCAC8BD,EAAKE,O,OAE1C,IAAWC,K,SAFHR,E,EAAAA,MAAOS,E,EAAAA,YACXC,EAAY,IAAIT,IACDD,EACjBU,EAAUC,IAAIH,EAAMR,EAAMQ,IAE5BL,KAAKS,SAAS,CAAEd,OAAO,EAAMe,WAAYJ,EAAaT,MAAOU,I,wBAE7DP,KAAKS,SAAS,CAAEb,QAAQ,I,iJAK1BI,KAAKW,kBAAkBC,MAAK,kBAAMC,QAAQC,IAAI,oB,mLAInBzB,EAAU0B,OAAOf,KAAKN,MAAMsB,U,UAAjDC,E,OACAC,E,OAASD,Q,IAAAA,O,EAAAA,EAAcC,O,uBAG3BlB,KAAKS,SAAS,CAAEU,OAAO,I,0BAGzB,I,6BAAA,EAAc5B,EAAd,gDAAS6B,EAAqB,WACnBF,IACDG,EAAIH,EAAOE,GACbpB,KAAKN,MAAMG,MAAMyB,IAAID,KACjBE,EAAWvB,KAAKN,MAAMG,MAAM2B,IAAIH,GACtCrB,KAAKS,SAAS,CAAEgB,OAAQJ,EAAGK,SAAUH,EAAUJ,OAAO,M,oYAO5D,GAAInB,KAAKN,MAAMC,MAAO,CACpB,GAAIK,KAAKN,MAAMsB,SACb,QAAyBW,IAArB3B,KAAKN,MAAMyB,MACbnB,KAAK4B,WAAWhB,MAAK,kBAAMC,QAAQC,IAAI,sBAClC,IAAyB,IAArBd,KAAKN,MAAMyB,MACpB,OACE,6BACE,iFAAmDnB,KAAKN,MAAMsB,WAC9D,0BAAMa,SAAU7B,KAAK8B,YAAYC,KAAK/B,OACpC,2BAAOgC,KAAK,SAASC,MAAM,YAMrC,OAAOjC,KAAKkC,cACP,OAAIlC,KAAKN,MAAME,OACb,mDAEF,6C,qCAGMuC,GACbnC,KAAKS,SAAS,CAAEV,cAAeoC,EAAMC,OAAOH,U,qCAI5CjC,KAAKS,SAAS,CAAEO,SAAUhB,KAAKN,MAAMK,kB,oCAIrCC,KAAKS,SAAS,CAAEO,cAAUW,EAAWR,WAAOQ,M,oCAI5C,OAAO3B,KAAKN,MAAMsB,UAAYhB,KAAKN,MAAM+B,QAAUzB,KAAKN,MAAMgC,SAC5D,6BACE,iDAAmB1B,KAAKN,MAAM+B,OAA9B,uBAAmDzB,KAAKN,MAAMgC,SAA9D,oCACA,0BAAMG,SAAU7B,KAAK8B,YAAYC,KAAK/B,OACpC,2BAAOgC,KAAK,SAASC,MAAM,WAE7B,qDACoBjC,KAAKN,MAAMgB,WAD/B,KAEE,uBAAG2B,KA/FX,8IA+FQ,YAGFrC,KAAKN,MAAMsB,SACb,2CAEA,0BAAMa,SAAU7B,KAAKsC,aAAaP,KAAK/B,OACrC,2BACEgC,KAAK,OACLC,MAAOjC,KAAKN,MAAMK,cAClBwC,SAAUvC,KAAKwC,eAAeT,KAAK/B,QAErC,2BAAOgC,KAAK,SAASC,MAAM,c,GAzGjBQ,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAc1D,MACrBiB,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.dd5a17c7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst postcodes = require(\"node-postcodes.io\");\n\ntype State = {\n  ready: boolean;\n  failed: boolean;\n  postcode?: string;\n  lastUpdate?: string;\n  cases: Map<string, string>;\n  myArea?: string;\n  myCaseNo?: string;\n  postcodeInput: string;\n  found?: boolean;\n};\n\nconst CANDIDATE_KEYS = [\"primary_care_trust\", \"admin_district\"];\nconst DATA_SOURCE = \"data_source.json\";\nconst GOV_UK_DATA_SOURCE =\n  \"https://www.gov.uk/government/publications/coronavirus-covid-19-number-of-cases-in-england/coronavirus-covid-19-number-of-cases-in-england\";\n\nclass App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      ready: false,\n      failed: false,\n      cases: new Map(),\n      postcodeInput: \"\"\n    };\n  }\n\n  async fetchDataSource() {\n    if (this.state.ready) return;\n    const resp = await fetch(DATA_SOURCE);\n    if (resp.ok) {\n      const { cases, last_update } = await resp.json();\n      let cases_map = new Map();\n      for (const area in cases) {\n        cases_map.set(area, cases[area]);\n      }\n      this.setState({ ready: true, lastUpdate: last_update, cases: cases_map });\n    } else {\n      this.setState({ failed: true });\n    }\n  }\n\n  componentDidMount() {\n    this.fetchDataSource().then(() => console.log(\"Data Loaded\"));\n  }\n\n  async findData() {\n    const lookupResult = await postcodes.lookup(this.state.postcode);\n    const result = lookupResult?.result;\n    // console.log(result);\n    if (!result) {\n      this.setState({ found: false });\n      return;\n    }\n    for (let k of CANDIDATE_KEYS) {\n      if (k in result) {\n        const v = result[k];\n        if (this.state.cases.has(v)) {\n          const numCases = this.state.cases.get(v);\n          this.setState({ myArea: v, myCaseNo: numCases, found: true });\n        }\n      }\n    }\n  }\n\n  render() {\n    if (this.state.ready) {\n      if (this.state.postcode) {\n        if (this.state.found === undefined) {\n          this.findData().then(() => console.log(\"Data Found\"));\n        } else if (this.state.found === false) {\n          return (\n            <div>\n              <div>{`Failed to find information about postcode ${this.state.postcode}`}</div>\n              <form onSubmit={this.handleReset.bind(this)}>\n                <input type=\"submit\" value=\"Reset\" />\n              </form>\n            </div>\n          );\n        }\n      }\n      return this.render_main();\n    } else if (this.state.failed) {\n      return <div>Error loading data</div>;\n    }\n    return <div>Loading...</div>;\n  }\n\n  handlePostcode(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ postcodeInput: event.target.value });\n  }\n\n  handleSubmit() {\n    this.setState({ postcode: this.state.postcodeInput });\n  }\n\n  handleReset() {\n    this.setState({ postcode: undefined, found: undefined });\n  }\n\n  render_main() {\n    return this.state.postcode && this.state.myArea && this.state.myCaseNo ? (\n      <div>\n        <div>{`You're at ${this.state.myArea}. There are ${this.state.myCaseNo} COVID-19 case(s) in your area.`}</div>\n        <form onSubmit={this.handleReset.bind(this)}>\n          <input type=\"submit\" value=\"Reset\" />\n        </form>\n        <div>\n          {`Last Updated: ${this.state.lastUpdate} `}\n          <a href={GOV_UK_DATA_SOURCE}>Source</a>\n        </div>\n      </div>\n    ) : this.state.postcode ? (\n      <div>Loading...</div>\n    ) : (\n      <form onSubmit={this.handleSubmit.bind(this)}>\n        <input\n          type=\"text\"\n          value={this.state.postcodeInput}\n          onChange={this.handlePostcode.bind(this)}\n        />\n        <input type=\"submit\" value=\"Find\" />\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}